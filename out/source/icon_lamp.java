/* autogenerated by Processing revision 1293 on 2024-08-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class icon_lamp extends PApplet {

PGraphics logo_canvas;
PGraphics lava_canvas;

PShape logo_icon_vector;

Blob[] blobs;

public void setup() {
    // size(800, 800);
    /* size commented out by preprocessor */;
    logo_canvas = createGraphics(width, height);
    lava_canvas = createGraphics(width, height);

    logo_icon_vector = loadShape("logo_icon.svg");

    blendMode(EXCLUSION);

    int blob_radius = 0;
    blobs = new Blob[60];
    for (int i = 0; i < blobs.length; i++) {
        blob_radius = sort_radius();
        blobs[i] = new Blob(blob_radius);
    }
}

public void draw() {
    background(255);
    logo_drawer();
    lava_drwer();
}

public void logo_drawer() {
    logo_canvas.beginDraw();
    logo_canvas.background(255);
    logo_canvas.shapeMode(CENTER);
    float horizontal_ratio = width / logo_icon_vector.width;
    float vertical_ratio = height / logo_icon_vector.height;
    float ratio  =  min(horizontal_ratio, vertical_ratio) * 0.8f;
    float new_horizontal_size = logo_icon_vector.width * ratio;
    float new_vertical_size = logo_icon_vector.height * ratio;
    logo_canvas.shape(logo_icon_vector, width/2, height/2, new_horizontal_size, new_vertical_size);
    logo_canvas.endDraw();
    image(logo_canvas, 0, 0);
}

public void lava_drwer() {
    lava_canvas.beginDraw();
    lava_canvas.background(255);
    // lava_canvas.fill(0);
    // lava_canvas.circle(mouseX, mouseY, 100);
    for (int i = 0; i < blobs.length; i++) {
        blobs[i].update();
        blobs[i].display(lava_canvas);
    }
    lava_canvas.endDraw();
    image(lava_canvas, 0, 0);
}

public int sort_radius() {
    float min_radius = min(width, height) / 30;
    float max_radius = min(width, height) / 4;
    float mean = (max_radius - min_radius) / 3.5f;
    float standard_deviation = (max_radius - min_radius) / 4;
    float bias = 0.3f;
    int sorted_radius = PApplet.parseInt(standard_deviation * (randomGaussian() - bias) + mean);
    if (sorted_radius < min_radius) {
        sorted_radius = PApplet.parseInt(min_radius);
    } else if (sorted_radius > max_radius) {
        sorted_radius = PApplet.parseInt(max_radius);
    }
    return sorted_radius;
}
class Blob {
  float radius;
  float diameter;
  float x;
  float y;
  float speedX;
  float speedY;
  float accelerationX;
  float accelerationY;
  float maxSpeed;
  float maxAcceleration;
  int noiseStart;
  float noiseStep;

  Blob(float radius) {
    this.radius = radius;
    diameter = radius * 2;
    x = ((width/2) * map(radius, min(width, height) / 30, min(width, height) / 4, 1, 0)) * randomGaussian() + width/2;
    y = random(-radius, height + radius);
    speedX = 0;
    speedY = random(-1, 1);
    accelerationX = 0;
    accelerationY = 0;
    maxSpeed = 1;
    maxAcceleration = 0.01f;
    noiseStart = PApplet.parseInt(random(10000));
  }

  public void display(PGraphics layer) {
    if(layer != null) {
      layer.fill(0);
      layer.noStroke();
      layer.circle(x, y, diameter);
    }
  }

  public void update() {
    accelerate();
    updateSpeed();
    move();
    bouncyBorders();
  }

  public void move() {
    x += speedX;
    y += speedY;
  }

  public void updateSpeed() {
    speedX += accelerationX;
    speedY += accelerationY;
    speedX = constrain(speedX, -maxSpeed, maxSpeed);
    speedY = constrain(speedY, -maxSpeed, maxSpeed);
  }

  public void accelerate() {
    noiseStep += 0.00005f;
    accelerationX = map(noise(noiseStart + noiseStep), 0, 1, -maxAcceleration/10, maxAcceleration/10);
    accelerationY = map(noise(noiseStart + noiseStep), 0, 1, -maxAcceleration, maxAcceleration);
  }

  public void bouncyBorders() {
    if (x > width + radius/2) {
      x = width + radius/2;
      speedX *= -0.8f;
    } else if (x < -radius/2) {
      x = -radius/2;
      speedX *= -0.8f;
    }
    if (y > height + radius/2) {
      y = height + radius/2;
      speedY *= -0.8f;
    } else if (y < -radius/2) {
      y = -radius/2;
      speedY *= -0.8f;
    }
  }
}


  public void settings() { fullScreen(P2D, 2); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "icon_lamp" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
